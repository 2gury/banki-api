// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: banks.proto

package banks

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Bank with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bank) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bank with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BankMultiError, or nil if none found.
func (m *Bank) ValidateAll() error {
	return m.validate(true)
}

func (m *Bank) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ExternalId

	// no validation rules for ExternalLegacyId

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BankValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BankValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PeriodFrom

	// no validation rules for PeriodTo

	// no validation rules for AmountFrom

	// no validation rules for AmountTo

	// no validation rules for RateFrom

	// no validation rules for RateTo

	// no validation rules for ReviewTime

	// no validation rules for Description

	if len(errors) > 0 {
		return BankMultiError(errors)
	}

	return nil
}

// BankMultiError is an error wrapping multiple validation errors returned by
// Bank.ValidateAll() if the designated constraints aren't met.
type BankMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BankMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BankMultiError) AllErrors() []error { return m }

// BankValidationError is the validation error returned by Bank.Validate if the
// designated constraints aren't met.
type BankValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankValidationError) ErrorName() string { return "BankValidationError" }

// Error satisfies the builtin error interface
func (e BankValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBank.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankValidationError{}

// Validate checks the field values on GetBanksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBanksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBanksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBanksRequestMultiError, or nil if none found.
func (m *GetBanksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBanksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for Language

	if len(errors) > 0 {
		return GetBanksRequestMultiError(errors)
	}

	return nil
}

// GetBanksRequestMultiError is an error wrapping multiple validation errors
// returned by GetBanksRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBanksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBanksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBanksRequestMultiError) AllErrors() []error { return m }

// GetBanksRequestValidationError is the validation error returned by
// GetBanksRequest.Validate if the designated constraints aren't met.
type GetBanksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBanksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBanksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBanksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBanksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBanksRequestValidationError) ErrorName() string { return "GetBanksRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBanksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBanksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBanksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBanksRequestValidationError{}

// Validate checks the field values on GetBanksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBanksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBanksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBanksResponseMultiError, or nil if none found.
func (m *GetBanksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBanksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBanks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBanksResponseValidationError{
						field:  fmt.Sprintf("Banks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBanksResponseValidationError{
						field:  fmt.Sprintf("Banks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBanksResponseValidationError{
					field:  fmt.Sprintf("Banks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBanksResponseMultiError(errors)
	}

	return nil
}

// GetBanksResponseMultiError is an error wrapping multiple validation errors
// returned by GetBanksResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBanksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBanksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBanksResponseMultiError) AllErrors() []error { return m }

// GetBanksResponseValidationError is the validation error returned by
// GetBanksResponse.Validate if the designated constraints aren't met.
type GetBanksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBanksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBanksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBanksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBanksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBanksResponseValidationError) ErrorName() string { return "GetBanksResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBanksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBanksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBanksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBanksResponseValidationError{}

// Validate checks the field values on UpdateBankRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBankRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBankRequestMultiError, or nil if none found.
func (m *UpdateBankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBank()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBankRequestValidationError{
					field:  "Bank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBankRequestValidationError{
					field:  "Bank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBank()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBankRequestValidationError{
				field:  "Bank",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBankRequestMultiError(errors)
	}

	return nil
}

// UpdateBankRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBankRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBankRequestMultiError) AllErrors() []error { return m }

// UpdateBankRequestValidationError is the validation error returned by
// UpdateBankRequest.Validate if the designated constraints aren't met.
type UpdateBankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBankRequestValidationError) ErrorName() string {
	return "UpdateBankRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBankRequestValidationError{}

// Validate checks the field values on UpdateBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBankResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBankResponseMultiError, or nil if none found.
func (m *UpdateBankResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBankResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBankResponseMultiError(errors)
	}

	return nil
}

// UpdateBankResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateBankResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateBankResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBankResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBankResponseMultiError) AllErrors() []error { return m }

// UpdateBankResponseValidationError is the validation error returned by
// UpdateBankResponse.Validate if the designated constraints aren't met.
type UpdateBankResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBankResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBankResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBankResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBankResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBankResponseValidationError) ErrorName() string {
	return "UpdateBankResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBankResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBankResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBankResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBankResponseValidationError{}

// Validate checks the field values on DeleteBankRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBankRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBankRequestMultiError, or nil if none found.
func (m *DeleteBankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBankRequestMultiError(errors)
	}

	return nil
}

// DeleteBankRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBankRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBankRequestMultiError) AllErrors() []error { return m }

// DeleteBankRequestValidationError is the validation error returned by
// DeleteBankRequest.Validate if the designated constraints aren't met.
type DeleteBankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBankRequestValidationError) ErrorName() string {
	return "DeleteBankRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBankRequestValidationError{}

// Validate checks the field values on DeleteBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBankResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBankResponseMultiError, or nil if none found.
func (m *DeleteBankResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBankResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBankResponseMultiError(errors)
	}

	return nil
}

// DeleteBankResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteBankResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteBankResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBankResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBankResponseMultiError) AllErrors() []error { return m }

// DeleteBankResponseValidationError is the validation error returned by
// DeleteBankResponse.Validate if the designated constraints aren't met.
type DeleteBankResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBankResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBankResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBankResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBankResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBankResponseValidationError) ErrorName() string {
	return "DeleteBankResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBankResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBankResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBankResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBankResponseValidationError{}

// Validate checks the field values on GetPossibleBanksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPossibleBanksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPossibleBanksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPossibleBanksRequestMultiError, or nil if none found.
func (m *GetPossibleBanksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPossibleBanksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPossibleBanksRequestMultiError(errors)
	}

	return nil
}

// GetPossibleBanksRequestMultiError is an error wrapping multiple validation
// errors returned by GetPossibleBanksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPossibleBanksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPossibleBanksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPossibleBanksRequestMultiError) AllErrors() []error { return m }

// GetPossibleBanksRequestValidationError is the validation error returned by
// GetPossibleBanksRequest.Validate if the designated constraints aren't met.
type GetPossibleBanksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPossibleBanksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPossibleBanksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPossibleBanksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPossibleBanksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPossibleBanksRequestValidationError) ErrorName() string {
	return "GetPossibleBanksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPossibleBanksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPossibleBanksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPossibleBanksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPossibleBanksRequestValidationError{}

// Validate checks the field values on GetPossibleBanksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPossibleBanksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPossibleBanksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPossibleBanksResponseMultiError, or nil if none found.
func (m *GetPossibleBanksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPossibleBanksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBanks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPossibleBanksResponseValidationError{
						field:  fmt.Sprintf("Banks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPossibleBanksResponseValidationError{
						field:  fmt.Sprintf("Banks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPossibleBanksResponseValidationError{
					field:  fmt.Sprintf("Banks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPossibleBanksResponseMultiError(errors)
	}

	return nil
}

// GetPossibleBanksResponseMultiError is an error wrapping multiple validation
// errors returned by GetPossibleBanksResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPossibleBanksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPossibleBanksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPossibleBanksResponseMultiError) AllErrors() []error { return m }

// GetPossibleBanksResponseValidationError is the validation error returned by
// GetPossibleBanksResponse.Validate if the designated constraints aren't met.
type GetPossibleBanksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPossibleBanksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPossibleBanksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPossibleBanksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPossibleBanksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPossibleBanksResponseValidationError) ErrorName() string {
	return "GetPossibleBanksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPossibleBanksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPossibleBanksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPossibleBanksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPossibleBanksResponseValidationError{}

// Validate checks the field values on RequestBankInformationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestBankInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestBankInformationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestBankInformationRequestMultiError, or nil if none found.
func (m *RequestBankInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestBankInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	if len(errors) > 0 {
		return RequestBankInformationRequestMultiError(errors)
	}

	return nil
}

// RequestBankInformationRequestMultiError is an error wrapping multiple
// validation errors returned by RequestBankInformationRequest.ValidateAll()
// if the designated constraints aren't met.
type RequestBankInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestBankInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestBankInformationRequestMultiError) AllErrors() []error { return m }

// RequestBankInformationRequestValidationError is the validation error
// returned by RequestBankInformationRequest.Validate if the designated
// constraints aren't met.
type RequestBankInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestBankInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestBankInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestBankInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestBankInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestBankInformationRequestValidationError) ErrorName() string {
	return "RequestBankInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestBankInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestBankInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestBankInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestBankInformationRequestValidationError{}

// Validate checks the field values on RequestBankInformationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestBankInformationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestBankInformationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestBankInformationResponseMultiError, or nil if none found.
func (m *RequestBankInformationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestBankInformationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBank()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestBankInformationResponseValidationError{
					field:  "Bank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestBankInformationResponseValidationError{
					field:  "Bank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBank()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestBankInformationResponseValidationError{
				field:  "Bank",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RequestBankInformationResponseMultiError(errors)
	}

	return nil
}

// RequestBankInformationResponseMultiError is an error wrapping multiple
// validation errors returned by RequestBankInformationResponse.ValidateAll()
// if the designated constraints aren't met.
type RequestBankInformationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestBankInformationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestBankInformationResponseMultiError) AllErrors() []error { return m }

// RequestBankInformationResponseValidationError is the validation error
// returned by RequestBankInformationResponse.Validate if the designated
// constraints aren't met.
type RequestBankInformationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestBankInformationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestBankInformationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestBankInformationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestBankInformationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestBankInformationResponseValidationError) ErrorName() string {
	return "RequestBankInformationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestBankInformationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestBankInformationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestBankInformationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestBankInformationResponseValidationError{}

// Validate checks the field values on Translation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Translation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Translation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TranslationMultiError, or
// nil if none found.
func (m *Translation) ValidateAll() error {
	return m.validate(true)
}

func (m *Translation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Lexeme

	// no validation rules for TranslatedLexeme

	// no validation rules for SourceLanguage

	// no validation rules for TargetLanguage

	if len(errors) > 0 {
		return TranslationMultiError(errors)
	}

	return nil
}

// TranslationMultiError is an error wrapping multiple validation errors
// returned by Translation.ValidateAll() if the designated constraints aren't met.
type TranslationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranslationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranslationMultiError) AllErrors() []error { return m }

// TranslationValidationError is the validation error returned by
// Translation.Validate if the designated constraints aren't met.
type TranslationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranslationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranslationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranslationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranslationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranslationValidationError) ErrorName() string { return "TranslationValidationError" }

// Error satisfies the builtin error interface
func (e TranslationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranslation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranslationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranslationValidationError{}

// Validate checks the field values on RequestTranslationTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestTranslationTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestTranslationTextRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestTranslationTextRequestMultiError, or nil if none found.
func (m *RequestTranslationTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestTranslationTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Language

	// no validation rules for Text

	if len(errors) > 0 {
		return RequestTranslationTextRequestMultiError(errors)
	}

	return nil
}

// RequestTranslationTextRequestMultiError is an error wrapping multiple
// validation errors returned by RequestTranslationTextRequest.ValidateAll()
// if the designated constraints aren't met.
type RequestTranslationTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestTranslationTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestTranslationTextRequestMultiError) AllErrors() []error { return m }

// RequestTranslationTextRequestValidationError is the validation error
// returned by RequestTranslationTextRequest.Validate if the designated
// constraints aren't met.
type RequestTranslationTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestTranslationTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestTranslationTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestTranslationTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestTranslationTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestTranslationTextRequestValidationError) ErrorName() string {
	return "RequestTranslationTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestTranslationTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestTranslationTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestTranslationTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestTranslationTextRequestValidationError{}

// Validate checks the field values on RequestTranslationTextResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestTranslationTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestTranslationTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestTranslationTextResponseMultiError, or nil if none found.
func (m *RequestTranslationTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestTranslationTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Language

	// no validation rules for Text

	if len(errors) > 0 {
		return RequestTranslationTextResponseMultiError(errors)
	}

	return nil
}

// RequestTranslationTextResponseMultiError is an error wrapping multiple
// validation errors returned by RequestTranslationTextResponse.ValidateAll()
// if the designated constraints aren't met.
type RequestTranslationTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestTranslationTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestTranslationTextResponseMultiError) AllErrors() []error { return m }

// RequestTranslationTextResponseValidationError is the validation error
// returned by RequestTranslationTextResponse.Validate if the designated
// constraints aren't met.
type RequestTranslationTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestTranslationTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestTranslationTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestTranslationTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestTranslationTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestTranslationTextResponseValidationError) ErrorName() string {
	return "RequestTranslationTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestTranslationTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestTranslationTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestTranslationTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestTranslationTextResponseValidationError{}

// Validate checks the field values on GetTranslationTextRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTranslationTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTranslationTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTranslationTextRequestMultiError, or nil if none found.
func (m *GetTranslationTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTranslationTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Language

	// no validation rules for Text

	if len(errors) > 0 {
		return GetTranslationTextRequestMultiError(errors)
	}

	return nil
}

// GetTranslationTextRequestMultiError is an error wrapping multiple validation
// errors returned by GetTranslationTextRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTranslationTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTranslationTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTranslationTextRequestMultiError) AllErrors() []error { return m }

// GetTranslationTextRequestValidationError is the validation error returned by
// GetTranslationTextRequest.Validate if the designated constraints aren't met.
type GetTranslationTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTranslationTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTranslationTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTranslationTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTranslationTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTranslationTextRequestValidationError) ErrorName() string {
	return "GetTranslationTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTranslationTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTranslationTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTranslationTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTranslationTextRequestValidationError{}

// Validate checks the field values on GetTranslationTextResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTranslationTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTranslationTextResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTranslationTextResponseMultiError, or nil if none found.
func (m *GetTranslationTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTranslationTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTranslation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTranslationTextResponseValidationError{
					field:  "Translation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTranslationTextResponseValidationError{
					field:  "Translation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTranslation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTranslationTextResponseValidationError{
				field:  "Translation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTranslationTextResponseMultiError(errors)
	}

	return nil
}

// GetTranslationTextResponseMultiError is an error wrapping multiple
// validation errors returned by GetTranslationTextResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTranslationTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTranslationTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTranslationTextResponseMultiError) AllErrors() []error { return m }

// GetTranslationTextResponseValidationError is the validation error returned
// by GetTranslationTextResponse.Validate if the designated constraints aren't met.
type GetTranslationTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTranslationTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTranslationTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTranslationTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTranslationTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTranslationTextResponseValidationError) ErrorName() string {
	return "GetTranslationTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTranslationTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTranslationTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTranslationTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTranslationTextResponseValidationError{}

// Validate checks the field values on CreateTranslationTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTranslationTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTranslationTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTranslationTextRequestMultiError, or nil if none found.
func (m *CreateTranslationTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTranslationTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTranslation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTranslationTextRequestValidationError{
					field:  "Translation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTranslationTextRequestValidationError{
					field:  "Translation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTranslation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTranslationTextRequestValidationError{
				field:  "Translation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTranslationTextRequestMultiError(errors)
	}

	return nil
}

// CreateTranslationTextRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTranslationTextRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTranslationTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTranslationTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTranslationTextRequestMultiError) AllErrors() []error { return m }

// CreateTranslationTextRequestValidationError is the validation error returned
// by CreateTranslationTextRequest.Validate if the designated constraints
// aren't met.
type CreateTranslationTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTranslationTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTranslationTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTranslationTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTranslationTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTranslationTextRequestValidationError) ErrorName() string {
	return "CreateTranslationTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTranslationTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTranslationTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTranslationTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTranslationTextRequestValidationError{}

// Validate checks the field values on CreateTranslationTextResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTranslationTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTranslationTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTranslationTextResponseMultiError, or nil if none found.
func (m *CreateTranslationTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTranslationTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTranslation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTranslationTextResponseValidationError{
					field:  "Translation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTranslationTextResponseValidationError{
					field:  "Translation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTranslation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTranslationTextResponseValidationError{
				field:  "Translation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTranslationTextResponseMultiError(errors)
	}

	return nil
}

// CreateTranslationTextResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTranslationTextResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateTranslationTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTranslationTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTranslationTextResponseMultiError) AllErrors() []error { return m }

// CreateTranslationTextResponseValidationError is the validation error
// returned by CreateTranslationTextResponse.Validate if the designated
// constraints aren't met.
type CreateTranslationTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTranslationTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTranslationTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTranslationTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTranslationTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTranslationTextResponseValidationError) ErrorName() string {
	return "CreateTranslationTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTranslationTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTranslationTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTranslationTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTranslationTextResponseValidationError{}

// Validate checks the field values on GetTranslationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTranslationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTranslationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTranslationsRequestMultiError, or nil if none found.
func (m *GetTranslationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTranslationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTranslationsRequestMultiError(errors)
	}

	return nil
}

// GetTranslationsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTranslationsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTranslationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTranslationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTranslationsRequestMultiError) AllErrors() []error { return m }

// GetTranslationsRequestValidationError is the validation error returned by
// GetTranslationsRequest.Validate if the designated constraints aren't met.
type GetTranslationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTranslationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTranslationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTranslationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTranslationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTranslationsRequestValidationError) ErrorName() string {
	return "GetTranslationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTranslationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTranslationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTranslationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTranslationsRequestValidationError{}

// Validate checks the field values on GetTranslationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTranslationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTranslationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTranslationsResponseMultiError, or nil if none found.
func (m *GetTranslationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTranslationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTranslations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTranslationsResponseValidationError{
						field:  fmt.Sprintf("Translations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTranslationsResponseValidationError{
						field:  fmt.Sprintf("Translations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTranslationsResponseValidationError{
					field:  fmt.Sprintf("Translations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTranslationsResponseMultiError(errors)
	}

	return nil
}

// GetTranslationsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTranslationsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTranslationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTranslationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTranslationsResponseMultiError) AllErrors() []error { return m }

// GetTranslationsResponseValidationError is the validation error returned by
// GetTranslationsResponse.Validate if the designated constraints aren't met.
type GetTranslationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTranslationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTranslationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTranslationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTranslationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTranslationsResponseValidationError) ErrorName() string {
	return "GetTranslationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTranslationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTranslationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTranslationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTranslationsResponseValidationError{}

// Validate checks the field values on Review with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Review) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Review with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReviewMultiError, or nil if none found.
func (m *Review) ValidateAll() error {
	return m.validate(true)
}

func (m *Review) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Content

	// no validation rules for IsApproved

	// no validation rules for UserEmail

	// no validation rules for UserPhone

	// no validation rules for Rating

	// no validation rules for BankId

	// no validation rules for UserName

	// no validation rules for Bank

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReviewValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReviewValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReviewValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReviewMultiError(errors)
	}

	return nil
}

// ReviewMultiError is an error wrapping multiple validation errors returned by
// Review.ValidateAll() if the designated constraints aren't met.
type ReviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewMultiError) AllErrors() []error { return m }

// ReviewValidationError is the validation error returned by Review.Validate if
// the designated constraints aren't met.
type ReviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewValidationError) ErrorName() string { return "ReviewValidationError" }

// Error satisfies the builtin error interface
func (e ReviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewValidationError{}

// Validate checks the field values on GetReviewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewsRequestMultiError, or nil if none found.
func (m *GetReviewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetReviewsRequestMultiError(errors)
	}

	return nil
}

// GetReviewsRequestMultiError is an error wrapping multiple validation errors
// returned by GetReviewsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReviewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsRequestMultiError) AllErrors() []error { return m }

// GetReviewsRequestValidationError is the validation error returned by
// GetReviewsRequest.Validate if the designated constraints aren't met.
type GetReviewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsRequestValidationError) ErrorName() string {
	return "GetReviewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsRequestValidationError{}

// Validate checks the field values on GetReviewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewsResponseMultiError, or nil if none found.
func (m *GetReviewsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReviews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReviewsResponseValidationError{
						field:  fmt.Sprintf("Reviews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReviewsResponseValidationError{
						field:  fmt.Sprintf("Reviews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReviewsResponseValidationError{
					field:  fmt.Sprintf("Reviews[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReviewsResponseMultiError(errors)
	}

	return nil
}

// GetReviewsResponseMultiError is an error wrapping multiple validation errors
// returned by GetReviewsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReviewsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsResponseMultiError) AllErrors() []error { return m }

// GetReviewsResponseValidationError is the validation error returned by
// GetReviewsResponse.Validate if the designated constraints aren't met.
type GetReviewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsResponseValidationError) ErrorName() string {
	return "GetReviewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsResponseValidationError{}

// Validate checks the field values on CreateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewRequestMultiError, or nil if none found.
func (m *CreateReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for UserEmail

	// no validation rules for UserPhone

	// no validation rules for Rating

	// no validation rules for BankId

	// no validation rules for UserName

	if len(errors) > 0 {
		return CreateReviewRequestMultiError(errors)
	}

	return nil
}

// CreateReviewRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewRequestMultiError) AllErrors() []error { return m }

// CreateReviewRequestValidationError is the validation error returned by
// CreateReviewRequest.Validate if the designated constraints aren't met.
type CreateReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewRequestValidationError) ErrorName() string {
	return "CreateReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewRequestValidationError{}

// Validate checks the field values on CreateReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewResponseMultiError, or nil if none found.
func (m *CreateReviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateReviewResponseMultiError(errors)
	}

	return nil
}

// CreateReviewResponseMultiError is an error wrapping multiple validation
// errors returned by CreateReviewResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewResponseMultiError) AllErrors() []error { return m }

// CreateReviewResponseValidationError is the validation error returned by
// CreateReviewResponse.Validate if the designated constraints aren't met.
type CreateReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewResponseValidationError) ErrorName() string {
	return "CreateReviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewResponseValidationError{}

// Validate checks the field values on UpdateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReviewRequestMultiError, or nil if none found.
func (m *UpdateReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IsApproved

	if len(errors) > 0 {
		return UpdateReviewRequestMultiError(errors)
	}

	return nil
}

// UpdateReviewRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReviewRequestMultiError) AllErrors() []error { return m }

// UpdateReviewRequestValidationError is the validation error returned by
// UpdateReviewRequest.Validate if the designated constraints aren't met.
type UpdateReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReviewRequestValidationError) ErrorName() string {
	return "UpdateReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReviewRequestValidationError{}

// Validate checks the field values on UpdateReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReviewResponseMultiError, or nil if none found.
func (m *UpdateReviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateReviewResponseMultiError(errors)
	}

	return nil
}

// UpdateReviewResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateReviewResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateReviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReviewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReviewResponseMultiError) AllErrors() []error { return m }

// UpdateReviewResponseValidationError is the validation error returned by
// UpdateReviewResponse.Validate if the designated constraints aren't met.
type UpdateReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReviewResponseValidationError) ErrorName() string {
	return "UpdateReviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReviewResponseValidationError{}

// Validate checks the field values on UpdateAutomoderationStrategyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateAutomoderationStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAutomoderationStrategyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateAutomoderationStrategyRequestMultiError, or nil if none found.
func (m *UpdateAutomoderationStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAutomoderationStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AutomoderationEnable

	if len(errors) > 0 {
		return UpdateAutomoderationStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateAutomoderationStrategyRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateAutomoderationStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAutomoderationStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAutomoderationStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAutomoderationStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateAutomoderationStrategyRequestValidationError is the validation error
// returned by UpdateAutomoderationStrategyRequest.Validate if the designated
// constraints aren't met.
type UpdateAutomoderationStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAutomoderationStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAutomoderationStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAutomoderationStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAutomoderationStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAutomoderationStrategyRequestValidationError) ErrorName() string {
	return "UpdateAutomoderationStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAutomoderationStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAutomoderationStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAutomoderationStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAutomoderationStrategyRequestValidationError{}

// Validate checks the field values on UpdateAutomoderationStrategyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateAutomoderationStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAutomoderationStrategyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateAutomoderationStrategyResponseMultiError, or nil if none found.
func (m *UpdateAutomoderationStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAutomoderationStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAutomoderationStrategyResponseMultiError(errors)
	}

	return nil
}

// UpdateAutomoderationStrategyResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateAutomoderationStrategyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAutomoderationStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAutomoderationStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAutomoderationStrategyResponseMultiError) AllErrors() []error { return m }

// UpdateAutomoderationStrategyResponseValidationError is the validation error
// returned by UpdateAutomoderationStrategyResponse.Validate if the designated
// constraints aren't met.
type UpdateAutomoderationStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAutomoderationStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAutomoderationStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAutomoderationStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAutomoderationStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAutomoderationStrategyResponseValidationError) ErrorName() string {
	return "UpdateAutomoderationStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAutomoderationStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAutomoderationStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAutomoderationStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAutomoderationStrategyResponseValidationError{}

// Validate checks the field values on GetPossibleBanksResponse_PossibleBank
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPossibleBanksResponse_PossibleBank) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPossibleBanksResponse_PossibleBank
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPossibleBanksResponse_PossibleBankMultiError, or nil if none found.
func (m *GetPossibleBanksResponse_PossibleBank) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPossibleBanksResponse_PossibleBank) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for ExternalLegacyId

	// no validation rules for Name

	// no validation rules for Logo

	if len(errors) > 0 {
		return GetPossibleBanksResponse_PossibleBankMultiError(errors)
	}

	return nil
}

// GetPossibleBanksResponse_PossibleBankMultiError is an error wrapping
// multiple validation errors returned by
// GetPossibleBanksResponse_PossibleBank.ValidateAll() if the designated
// constraints aren't met.
type GetPossibleBanksResponse_PossibleBankMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPossibleBanksResponse_PossibleBankMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPossibleBanksResponse_PossibleBankMultiError) AllErrors() []error { return m }

// GetPossibleBanksResponse_PossibleBankValidationError is the validation error
// returned by GetPossibleBanksResponse_PossibleBank.Validate if the
// designated constraints aren't met.
type GetPossibleBanksResponse_PossibleBankValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPossibleBanksResponse_PossibleBankValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPossibleBanksResponse_PossibleBankValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPossibleBanksResponse_PossibleBankValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPossibleBanksResponse_PossibleBankValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPossibleBanksResponse_PossibleBankValidationError) ErrorName() string {
	return "GetPossibleBanksResponse_PossibleBankValidationError"
}

// Error satisfies the builtin error interface
func (e GetPossibleBanksResponse_PossibleBankValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPossibleBanksResponse_PossibleBank.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPossibleBanksResponse_PossibleBankValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPossibleBanksResponse_PossibleBankValidationError{}
