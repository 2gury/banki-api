// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: banks.proto

package banks

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Bank with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bank) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bank with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BankMultiError, or nil if none found.
func (m *Bank) ValidateAll() error {
	return m.validate(true)
}

func (m *Bank) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ExternalId

	// no validation rules for ExternalLegacyId

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BankValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BankValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PeriodFrom

	// no validation rules for PeriodTo

	// no validation rules for AmountFrom

	// no validation rules for AmountTo

	// no validation rules for RateFrom

	// no validation rules for RateTo

	// no validation rules for ReviewTime

	if len(errors) > 0 {
		return BankMultiError(errors)
	}

	return nil
}

// BankMultiError is an error wrapping multiple validation errors returned by
// Bank.ValidateAll() if the designated constraints aren't met.
type BankMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BankMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BankMultiError) AllErrors() []error { return m }

// BankValidationError is the validation error returned by Bank.Validate if the
// designated constraints aren't met.
type BankValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankValidationError) ErrorName() string { return "BankValidationError" }

// Error satisfies the builtin error interface
func (e BankValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBank.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankValidationError{}

// Validate checks the field values on GetBanksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBanksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBanksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBanksRequestMultiError, or nil if none found.
func (m *GetBanksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBanksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetBanksRequestMultiError(errors)
	}

	return nil
}

// GetBanksRequestMultiError is an error wrapping multiple validation errors
// returned by GetBanksRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBanksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBanksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBanksRequestMultiError) AllErrors() []error { return m }

// GetBanksRequestValidationError is the validation error returned by
// GetBanksRequest.Validate if the designated constraints aren't met.
type GetBanksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBanksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBanksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBanksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBanksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBanksRequestValidationError) ErrorName() string { return "GetBanksRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBanksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBanksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBanksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBanksRequestValidationError{}

// Validate checks the field values on GetBanksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBanksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBanksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBanksResponseMultiError, or nil if none found.
func (m *GetBanksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBanksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBanks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBanksResponseValidationError{
						field:  fmt.Sprintf("Banks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBanksResponseValidationError{
						field:  fmt.Sprintf("Banks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBanksResponseValidationError{
					field:  fmt.Sprintf("Banks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBanksResponseMultiError(errors)
	}

	return nil
}

// GetBanksResponseMultiError is an error wrapping multiple validation errors
// returned by GetBanksResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBanksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBanksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBanksResponseMultiError) AllErrors() []error { return m }

// GetBanksResponseValidationError is the validation error returned by
// GetBanksResponse.Validate if the designated constraints aren't met.
type GetBanksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBanksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBanksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBanksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBanksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBanksResponseValidationError) ErrorName() string { return "GetBanksResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBanksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBanksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBanksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBanksResponseValidationError{}

// Validate checks the field values on UpdateBankRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBankRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBankRequestMultiError, or nil if none found.
func (m *UpdateBankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBank()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBankRequestValidationError{
					field:  "Bank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBankRequestValidationError{
					field:  "Bank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBank()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBankRequestValidationError{
				field:  "Bank",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBankRequestMultiError(errors)
	}

	return nil
}

// UpdateBankRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBankRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBankRequestMultiError) AllErrors() []error { return m }

// UpdateBankRequestValidationError is the validation error returned by
// UpdateBankRequest.Validate if the designated constraints aren't met.
type UpdateBankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBankRequestValidationError) ErrorName() string {
	return "UpdateBankRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBankRequestValidationError{}

// Validate checks the field values on UpdateBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBankResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBankResponseMultiError, or nil if none found.
func (m *UpdateBankResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBankResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBankResponseMultiError(errors)
	}

	return nil
}

// UpdateBankResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateBankResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateBankResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBankResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBankResponseMultiError) AllErrors() []error { return m }

// UpdateBankResponseValidationError is the validation error returned by
// UpdateBankResponse.Validate if the designated constraints aren't met.
type UpdateBankResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBankResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBankResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBankResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBankResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBankResponseValidationError) ErrorName() string {
	return "UpdateBankResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBankResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBankResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBankResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBankResponseValidationError{}
